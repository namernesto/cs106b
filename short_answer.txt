Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Q1. Use the above encoding tree to decode the bit sequence `0101100011`.
A1. MOONS

Q2. Prepare a table for the above encoding tree that lists each character with its assigned bit sequence.
Use your table to encode the string `"SONS"`.
A2. 011100011

Q3. Huffman codes obey the _prefix_ property: no character's encoded bit sequence is a prefix of any other.
What feature of an encoding tree demonstrates that it obeys the prefix property?
A3. All of the characters are leaf nodes

Q4. Flatten the encoding tree above on the right into its sequence of bits and sequence of characters.
A4. 1101000, NMSO

Q5. Unflatten the sequences `110100100` and `FLERA` to reconstruct the original encoding tree.
A5.
       *
     /   \
    *     *
   / \   / \
  F   *  R  A
     / \
     L  E

Q6. Construct a Huffman coding tree for the input `"BOOKKEEPER"`.
A6.

            10
           /  \
          6    4
         / \   /\
        E   3 O  K
           / \
          2   B
         / \
        P   R



Q7. Calculate the entropy of your Huffman tree for `"BOOKKEEPER"`.
Confirm that if you had chosen to break ties in a different manner when constructing the tree,
this alternate tree has the same entropy as the optimal result.
A7. 2.3

Q8. Consider the space of inputs of length 1000 that consists of varied occurrences of 100 distinct characters.
Of those various inputs, contrast which result in a balanced Huffman tree versus those that
produce a very lopsided Huffman tree. Which of the two Huffman trees achieves more significant compression?
What does this tell you about what makes for a "good" versus "bad" Huffman tree?
A8. The one with a lopsided huffman tree achieves more significant compression. What makes a good hoffman tree is to use as little space as possible for the most repeated characters. Otherwise, even very infrequent characters would take unnecessary space.
